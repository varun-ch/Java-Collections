package com.cloudwick.collections;

import java.util.HashSet;
import java.util.TreeSet;

public class Hash_And_Tree {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		HashSet<Integer> hs = new HashSet<Integer>();
		
		//HashSet<Integer> hs2 = new HashSet<Integer>(10);//capacity
		//The 0.8 is the fill ratio(default=0.75)(can be between 0 and 1.0)
		//the fill ratio determines how full the hash set can be before it is resized upward
		//HashSet<Integer> hs3 = new HashSet<Integer>(10, (float) 0.8);

		hs.add(1);
		hs.add(20);
		hs.add(12);
		hs.add(4);
		hs.add(18);
		//hash set doesn't store elements in sorted order
		System.out.println(hs);
		
		TreeSet<Integer> ts = new TreeSet<Integer>();
		
		ts.add(1);
		ts.add(20);
		ts.add(12);
		ts.add(4);
		ts.add(18);
		
		TreeSet<String> ts2 = new TreeSet<String>();
		
		ts2.add("E");
		ts2.add("R");
		ts2.add("F");
		ts2.add("C");
		ts2.add("S");
		ts2.add("A");
		ts2.add("M");
		//tree set stores elements in sorted order
		System.out.println(ts);
		System.out.println(ts2);
		System.out.println(ts2.ceiling("K"));
		System.out.println(ts2.floor("J"));
		System.out.println(ts2.subSet("A", "M"));//A inclusive and M exclusive
		System.out.println(ts2.subSet("A",false, "M", false));//exclusive

	}

}
